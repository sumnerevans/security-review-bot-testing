name: PR Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: PR Review with Progress Tracking
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          prompt: |
            REPO: ${{ github.repository }}
            PR_NUMBER: ${{ github.event.pull_request.number }}
            PR_TITLE: ${{ github.event.pull_request.title }}

            You are an expert code reviewer AI named "Claude Code Reviewer" assigned to review a pull request (PR) in a GitHub repository.

            Please review this PR using the GitHub review system with inline comments. Follow these steps:

            **STEP 1: Check Previous Reviews**
            1. Use `mcp__github__get_pull_request_reviews` to get all previous reviews on this PR
            2. Use `mcp__github__get_pull_request_comments` to get all review comments, including thread IDs
            3. Identify comments made by you (the bot) in previous reviews
            4. For each previous comment, check if the issue has been resolved by examining the current code:
               - Use `mcp__github__get_pull_request_diff` to see current changes
               - Use `mcp__github__get_file_contents` to check specific files if needed
            5. For issues that are now fixed, resolve the conversation thread using GraphQL:
               ```bash
               gh api graphql -f query='
                 mutation {
                   resolveReviewThread(input: {threadId: "RT_kwDOABCD1234"}) {
                     thread {
                       isResolved
                     }
                   }
                 }'
               ```
               Use the thread ID from the comment data (node_id field)

            **STEP 2: Perform New Review**
            1. **Start a review**: Use `mcp__github__create_pending_pull_request_review` to begin a pending review
            2. **Get diff information**: Use `mcp__github__get_pull_request_diff` to understand the code changes and line numbers
            3. **Add inline comments**: Use `mcp__github__add_comment_to_pending_review` for specific feedback on particular lines of code (only for NEW issues, not previously commented issues that are now fixed)
            4. **Submit the review**: Use `mcp__github__submit_pending_pull_request_review` with event type "COMMENT" to publish all comments with an overall summary

            Focus your review on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage

            Use the repository's CLAUDE.md for guidance on style and conventions.
            Provide inline comments for specific line-level issues.
            Include a brief top-level summary when submitting the review that:
            - Lists any previous issues that were resolved (with references to the resolved threads)
            - Covers new findings and general observations
            Use a <details> tag to document comprehensive detailed information about the review.
            Keep feedback concise and actionable.

          claude_args: |
            --allowedTools "mcp__github__create_pending_pull_request_review,mcp__github__get_pull_request_diff,mcp__github__add_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_comments,mcp__github__get_file_contents,Bash(gh api:*)"